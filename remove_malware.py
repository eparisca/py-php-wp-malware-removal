#!/usr/bin/env python

"""
A very-specific malware search and removal program for PHP / WordPress v1.0

The MIT License (MIT)

Copyright (c) 2015 Emilio Parisca.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import optparse
import os 
import re 

# Note: "verbose" default is True for CLI calls, but False for import
DefaultConfig = {
    "verbose": False,
    "verbose_clean": False,
    "verbose_missing": False,
    "dry_run": True    
}
#pattern = r'\<\?php \$GLOBALS\[\$GLOBALS\['
#pattern = r'\<\?php error\_reporting\(0\)\;'
pattern = r'\<\?php if\(\!isset\(\$GLOBALS\[\"\\x61\\156\\x75\\156\\x61\"\]\)\) .* \$gpdkvqcaee\=\$msuqldfhhd\-1\; \?\>'
prog = re.compile(pattern)
    
def test_regex(filename='/home/buckhead/public_html.hack/500.php'):
    if file_has_code(filename):
        print "MATCH FOUND"
    else: 
        print "MATCH NOT FOUND"
    
def file_has_code(filename):
    """ Test if file has offending code on its first line. """
    line = open(filename, mode='r').readline()
    match = prog.match(line)
    if match:
        return True        
    else: 
        return False
    
def remove_offending_code(haystack, repl=''):
    """ Remove offending code from haystack (str), optionally replacing it with another string. """
    return prog.sub(repl, haystack)

def replace_lines(filename, conf=DefaultConfig, repl=''):
    """ Replace first line on a file with the specified string(s).
    @see http://stackoverflow.com/a/15469189/1023107
    """
    with open(filename) as fin:
        lines = fin.readlines()
    lines[0] = remove_offending_code(lines[0], repl)
    if conf["dry_run"]:
        try: 
            print lines[0]
            print lines[1]
        except IndexError:
            pass
    else:
        with open(filename, 'w') as fout:
            for line in lines:
                fout.write(line) 
     
def clean_file(filename, conf=DefaultConfig):
    """ Clean file. """
    if os.path.exists(filename):
        if file_has_code(filename):
            if conf["verbose"]:
                print "Fixing : ", filename
            replace_lines(filename, conf)
        else: 
            if conf["verbose_clean"]:
                print "Clean  : ", filename
    else:
        if conf["verbose_missing"]:
            print "Missing: ", filename        

def main(filename='', index_filename='', conf=DefaultConfig):
    """ Main. """
    if conf["dry_run"]:
        print "**** INFO: DRY RUN. No changes will be applied. ****" 
    if index_filename:
        index = open(index_filename, mode='r')  
        cnt = 0
        for filename in index:
            filename = filename.rstrip('\n')
            if len(filename) > 0 and filename != "DONE":
                clean_file(filename, conf)  
            cnt = cnt + 1
            # for testing on first few files
            #if cnt > 2:
                #break    
        index.close()
    elif filename: 
        clean_file(filename, conf)  
    else:
        raise IOError("You must specify either a filename or an index filename.")
    if conf["dry_run"]:
        print "**** INFO: DRY RUN. No changes have been applied. ****"     
       
if __name__ == '__main__':
    usage = "python %prog [options] [-f] [-s FILENAME] [-i INDEX_FILENAME] "    
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-d", "--dry-run",
                      action="store_true", dest="dry_run", default=DefaultConfig["dry_run"],
                      help="Dry-run. Does not make actual changes to files (default).")  
    parser.add_option("-f", "--force",
                      action="store_false", dest="dry_run", 
                      help="Force run. Makes changes to files.")     
    parser.add_option("-s", "--source", 
                      dest="filename", metavar="FILENAME", 
                      help="Source file to be cleaned.")     
    parser.add_option("-i", "--index", 
                      dest="index", metavar="INDEX_FILENAME", 
                      help="Text file containing new-line delimited list of files to be cleaned.")  
    parser.add_option("-c", "--verbose-clean",
                      action="store_true", dest="verbose_clean", default=DefaultConfig["verbose_clean"],
                      help="Warn about clean files (different offending code).")       
    parser.add_option("-m", "--verbose-missing",
                      action="store_true", dest="verbose_missing", default=DefaultConfig["verbose_missing"],
                      help="Warn about missing files.")     
    # Note: "verbose" default is True for CLI calls, but False for import
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=True,
                      help="verbose output (default)")    
    parser.add_option("-q", "--quiet",
                      action="store_false", dest="verbose",
                      help="minimal output")        
    options, args = parser.parse_args()
    
    try: 
        main(options.filename, options.index, { 
            "verbose": options.verbose,
            "verbose_clean": options.verbose_clean,
            "verbose_missing": options.verbose_missing,
            "dry_run": options.dry_run            
        })
    except IOError:
        print "A very-specific malware search and removal program for PHP / WordPress v1.0"
        parser.print_help()        
